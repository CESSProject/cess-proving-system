# How to build and run this Dockerfile:
#
# ```
# CESS_PROVING_SYSTEM=`pwd` # path to `cess-proving-system`
# docker --log-level debug build --progress tty --file Dockerfile-profile --tag rust-cpu-profile .
# docker run -it -v $CESS_PROVING_SYSTEM:/code/ rust-cpu-profile
# ```

FROM rust

# Get all the dependencies
# ------------------------

# Copied from: github.com/CESSProject/cess-proving-system/blob/master/Dockerfile-ci
RUN apt-get update && \
    apt-get install -y curl file gcc g++ git make openssh-client \
    autoconf automake cmake libtool libcurl4-openssl-dev libssl-dev \
    libelf-dev libdw-dev binutils-dev zlib1g-dev libiberty-dev wget \
    xz-utils pkg-config python clang

# `gperftools` and dependencies (`libunwind`)
# -------------------------------------------

ENV GPERFTOOLS_VERSION="2.7"
ENV LIBUNWIND_VERSION="0.99-beta"

ENV HOME="/root"
ENV DOWNLOADS=${HOME}/downloads
RUN mkdir -p ${DOWNLOADS}
RUN echo ${DOWNLOADS}
WORKDIR ${DOWNLOADS}

RUN wget http://download.savannah.gnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz --output-document ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}.tar.gz
RUN tar -xvf ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}.tar.gz
WORKDIR ${DOWNLOADS}/libunwind-${LIBUNWIND_VERSION}
RUN ./configure
RUN make
RUN make install
WORKDIR ${DOWNLOADS}

RUN wget https://github.com/gperftools/gperftools/releases/download/gperftools-${GPERFTOOLS_VERSION}/gperftools-${GPERFTOOLS_VERSION}.tar.gz  --output-document ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}.tar.gz
RUN tar -xvf ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}.tar.gz
WORKDIR ${DOWNLOADS}/gperftools-${GPERFTOOLS_VERSION}
RUN ./configure
RUN make install
WORKDIR ${DOWNLOADS}

ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
# FIXME: `gperftools` installs the library (`make install`) in
# `/usr/local/lib` by default but Debian/Ubuntu don't look there
# now, the correct `--prefix` should be added to the command.

# Install latest toolchain used by `cess-proving-system`
# --------------------------------------------------

RUN rustup default nightly-2019-07-15
# FIXME: The lastest version used should be dynamically obtained form the `cess-proving-system` repo
# and not hard-coded here.

# Ready to run
# ------------

WORKDIR /code

CMD                                                                           \
cargo update                                                                  \
&&                                                                            \
cargo build                                                                   \
  -p cess-proofs                                                          \
  --release                                                                   \
  --example stacked                                                            \
  --features                                                                  \
    cpu-profile                                                               \
  -Z package-features                                                         \
&&                                                                            \
RUST_BACKTRACE=full                                                           \
RUST_LOG=trace                                                                \
target/release/examples/stacked                                                \
  --size 1024                                                                 \
&&                                                                            \
pprof target/release/examples/stacked replicate.profile || bash
